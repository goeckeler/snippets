        import java.lang.reflect.*;
        
        class Tester {
            public static void main(String[] args) throws Exception {
                Cheese cheese1 = new Wensleydale();
                Cheese cheese2 = new Gouda();
                Cheese cheese3 = new Brie();
                Cheese cheese4 = new Gorgonzola();
                Cheese cheese5 = new SomeOtherCheese();
        
                Visitor v = new VisitorImpl();
                cheese1.accept(v);
                cheese2.accept(v);
                cheese3.accept(v);
                cheese4.accept(v);
                cheese5.accept(v);
            }
        }
        interface Visitor { void visit(Cheese c) throws Exception; }        
        class VisitorImpl implements Visitor {
            private Method getPolymorphicMethod(Cheese cheese) throws Exception {
                Class cl = cheese.getClass();  // the bottom-most class
                // Check through superclasses for matching method
                while(!cl.equals(Object.class)) {
                    try {
                        return this.getClass().getDeclaredMethod("visit", new Class[] { cl });
                    } catch(NoSuchMethodException ex) {
                        cl = cl.getSuperclass();
                    }
                }
                // Check through interfaces for matching method
                Class[] interfaces = cheese.getClass().getInterfaces();
                for (int i=0; i<interfaces.length; i++) {
                    try {
                        return this.getClass().getDeclaredMethod("visit", new Class[] { interfaces[i] });
                    } catch(NoSuchMethodException ex) {
                    }
                }
                return null;
            }
        
            public void visit(Cheese c) throws Exception {
                Method downPolymorphic = getPolymorphicMethod(c);
                if (downPolymorphic == null) {
                    defaultVisit(c);
                } else {
                    downPolymorphic.invoke(this, new Object[] {c});
                }
            }

            void defaultVisit(Cheese c) { System.out.println("A cheese"); }
            void visit(Wensleydale w) { System.out.println(w.wensleydaleName()); }
            void visit(Gouda g) { System.out.println(g.goudaName()); }
            void visit(Brie b) { System.out.println(b.brieName()); }
            void visit(AnotherCheese a) { System.out.println(a.otherCheeseName()); }
        }
        
        interface Cheese { void accept(Visitor v) throws Exception; }
        interface AnotherCheese extends Cheese { String otherCheeseName(); }
        abstract class BaseCheese implements Cheese { 
            public void accept(Visitor v) throws Exception { v.visit(this); } 
        }
        class Wensleydale extends BaseCheese { String wensleydaleName() { return "This is wensleydale"; } }
        class Gouda extends BaseCheese { String goudaName() { return "This is gouda"; } }
        class Brie extends BaseCheese { String brieName() { return "This is brie"; } }
        class SomeOtherCheese extends BaseCheese implements AnotherCheese { 
            public String otherCheeseName() { return "Different cheese "; }
        }
        class Gorgonzola extends BaseCheese { String gorgonzolaName() { return "This is gorgonzola"; } }
